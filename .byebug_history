continue
return optionscopy
optionscopy
options.keys.each { |key| optionscopy[key.to_sym] = options[key] }
optionscopy
options.keys.each { |key| optionscopy[key.to_sym] = optionscopy[key] }
options.keys.each { |key| optionscopy.delete key }
optionscopy
options.keys.each { |key| optionscopy[key.to_sym] = optionscopy[key] }
optionscopy
optionscopy.keys.each { |key| puts key.to_sym }
optionscopy
optionscopy.keys.each { |key| optionscopy[key.to_sym] = optionscopy[key] }
optionscopy.keys.each { |key| puts key.class.name == 'Symbol' }
optionscopy.keys.each { |key| puts key.class.name }
optionscopy.keys.each { |key| puts key }
optionscopy.keys
optionscopy
optionscopy = ::Collapsium::Config::Configuration.new(options)
optionscopy
optionscopy.keys
optionscopy.keys.each { |key| puts key }
next
optionscopy
next
options
options.keys
optons.keys
options.keys.all? { |key| key.class.name == 'Symbol' }
options.nil? || options.keys.all? { |key| key.class.name == 'Symbol' }
optiions.nil?
step
next
step
quit
options
next
transform_string_to_symbol_index orig_options
orig_options
next
step
caps1
x = tester.resolve_options(:chrome, 'caps' => caps1)
continue
optionscopy
next
step
next
step
quit
options.keys.each do |key|
next
options.keys
options.keys.all? { |key| key.class.name == 'Symbol' }
options.nil?
step
next
step
quit
transform_string_to_symbol_index orig_options
orig_options
options
label
next
options
next
options
next
orig_options
next
step
quit
y
quit
next
next#
next
step
up
help
step tester.resolve_options(:chrome, opts)
opts
resolved
continue
next
resolved
opts
continue
next
expect(resolved[:caps]).to be_nil
 expect(resolved[:desired_capabilities][:foo]).to eql 123
expect(resolved[:desired_capabilities]).not_to be_nil
opts
resolved
continue
quit
options
label
scope
next
step
identifier('driver', label, options)
identifier('driver', label, options2)
options2
options2[:phantomjs][:port] = 1234
options2 = options.dup
options
label
identifier('driver', label, options)
next
options
next
options
next
options
next
options
next
options
label
next
step
resolved1
tester.resolve_options(:phantomjs, opts)
opts
next
opts
next
opts
tester.resolve_options(:phantomjs, opts)
tester
